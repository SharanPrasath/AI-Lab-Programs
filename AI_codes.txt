N-Queens Problem

n = int(input())
col=set()
posdiag=set()
negdiag=set()
board=[["."]*n for i in range(n)]
result=[]
def backtrack(r):
    if(r==n):
        copy = ["".join(i) for i in board]
        result.append(copy)
        return
    for c in range(n):
        if c in col or (r+c) in posdiag or (r-c) in negdiag:
            continue
        col.add(c)
        posdiag.add(r+c)
        negdiag.add(r-c)
        board[r][c] = "Q"
        backtrack(r+1)
        col.remove(c)
        posdiag.remove(r+c)
        negdiag.remove(r-c)
        board[r][c] = "."
    return result
backtrack(0)

Graph coloring problem:

colors = ['Red', 'Blue', 'Green', 'Yellow', 'Black']

states = ['Andhra', 'Karnataka', 'TamilNadu', 'Kerala']

neighbors = {}
neighbors['Andhra'] = ['Karnataka', 'TamilNadu']
neighbors['Karnataka'] = ['Andhra', 'TamilNadu', 'Kerala']
neighbors['TamilNadu'] = ['Andhra', 'Karnataka', 'Kerala']
neighbors['Kerala'] = ['Karnataka', 'TamilNadu']

colors_of_states = {}

def promising(state, color):
    for neighbor in neighbors.get(state): 
        color_of_neighbor = colors_of_states.get(neighbor)
        if color_of_neighbor == color:
            return False

    return True

def get_color_for_state(state):
    for color in colors:
        if promising(state, color):
            return color

def main():
    for state in states:
        colors_of_states[state] = get_color_for_state(state)

    print(colors_of_states)


main()

BFS


import collections

# BFS algorithm
def bfs(graph, root):

    visited, queue = set(), collections.deque([root])
    visited.add(root)

    while queue:

        # Dequeue a vertex from queue
        vertex = queue.popleft()
        print(str(vertex) + " ", end="")
        # If not visited, mark it as visited, and
        # enqueue it
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)


if __name__ == '__main__':
    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
    print("Following is Breadth First Traversal: ")
    bfs(graph, 0)


DFS

graph = {
'0' : ['1','2','3'],
'1' : ['2'],
'2' : ['4'],
'3' : [],
'4' : [],
}

visited = set() # Set to keep track of visited nodes.

def dfs(visited, graph, node):
    if node not in visited:
        print (node)
        visited.add(node)
    for neighbour in graph[node]:
        dfs(visited, graph, neighbour)
dfs(visited, graph, '0')    

Best First Search

graph = {
'A':[('B',4), ('C',1), ('D',2)],
'B':[('E',8), ('F',6)],
'C':[('F',10), ('G',15)],
'D':[('G',9)],
'E':[],
'F':[],
'G':[]
}
def bfs(start, target, graph, queue=[], visited=[]):
    if start not in visited:
        print(start)
        visited.append(start)
    queue=queue+[x for x in graph[start] if x[0][0] not in visited]
    queue.sort(key=lambda x:x[1])
 
    if queue[0][0]==target:
        print(queue[0][0])
    else:
        processing=queue[0]
        queue.remove(processing)
        bfs(processing[0], target, graph, queue, visited)
bfs('A', 'F', graph)



A star

class Node():
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.g = 0
        self.h = 0
        self.f = 0
    def __eq__(self, other):
        return self.position == other.position
def astar(maze, start, end):
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []
    open_list.append(start_node)
    while len(open_list) > 0:
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1] # Return reversed path
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
                continue
            if maze[node_position[0]][node_position[1]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            for closed_child in closed_list:
                if child == closed_child:
                    continue
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue
            open_list.append(child)

def main():
    maze = [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    start = (0, 0)
    end = (7, 6)
    path = astar(maze, start, end)
    print(path)
if __name__ == '__main__':
    main()


CSP - map-coloring

paint = ['Red','Green','Blue']
countryStates = ['WA','NT','SA','Q','NSW','V','T']
neighbouringStates = {}
neighbouringStates['WA']=['NT','SA']
neighbouringStates['NT']=['WA','SA','Q']
neighbouringStates['SA']=['WA','NT','Q','NSW','V']
neighbouringStates['Q']=['NT','SA','NSW']
neighbouringStates['NSW']=['SA','Q','V']
neighbouringStates['V']=['SA','NSW']
neighbouringStates['T']=[]
colorOfStates = {}
def possibility(state,color):
    for neighbour in neighbouringStates.get(state):
        coloring = colorOfStates.get(neighbour)
        if coloring == color:
            return False
        else:
            return True
def coloringState(state):
    for color in paint:
        if possibility(state,color):
            return color
def main():
    for state in countryStates:
        colorOfStates[state] = coloringState(state)
    print(colorOfStates)
    for key in colorOfStates:
        print(f"The Color of the state {key} is {colorOfStates[key]}")
        
main()

Monty Hall Problem :

print ("""
This is the Monty Hall problem.
There are 3 doors in front of you, and there is a prize behind one of
them.
Once you select a door, I will open one of the two you had not
selected which does not have a prize behind it.
You will then have the opportunity to switch from the door you
originally selected to an alternate door..
""")
import random

A="A"
B="B"


C="C"

doors = ["A", "B", "C"]

prize = random.choice(doors)

selection = input("Select door 'A', 'B', or 'C': ")

print ("""
This problem relies on conditional probabilities.
It is suggested that you switch doors, you will have a higher probability of
winning of you do.""")

if selection == prize:
    remaining = list(set(doors) - set(prize))
    open_door = random.choice(list(set(doors) -
    set(random.choice(remaining))))
    alternate = random.choice(list(set(doors) - set(open_door) -
    set(prize)))
    
else:
    open_door = random.choice(list(set(doors) - set(selection) -
    set(prize)))
    alternate = random.choice(list(set(doors) - set(open_door) -
    set(selection)))
print ("""

The door I will now open is: %r
""" % open_door)

second_chance = input("Would you like to select the third door? Type 'Yes'or 'No': ")

if second_chance == "Yes":
    print ("""
        The door you will switch to is: %r """ % alternate)

    if alternate == prize:
        print ("""
        Congrats, you win! The prize was behind the alternate, %r""" %
        alternate)
    else:
        print ("""
        Sorry, the prize was behind the original door %r""" % prize)
if second_chance != "Yes":
    print ("""
    You decided to keep your initial door, %r""" % selection)
    if selection != prize:
        print ("""
        Sorry, the prize was behind the alternate door, %r""" % prize)
    else:
        print("""
        Congrats, you win! The prize was behind your original
        selection, %r""" % selection)

print ("""
This is a check:""")

print ("Prize: %r" % prize)
print ("Selection: %r " % selection)
print ("Alternate: %r " % alternate)
print ("Door opened: %r " % open_door)

Cryptoparithmetic:
def solutions():
    # letters = ('s', 'e', 'n', 'd', 'm', 'o', 'r', 'y')
    all_solutions = list()
    for s in range(9, -1, -1):
        for e in range(9, -1, -1):
            for n in range(9, -1, -1):
                for d in range(9, -1, -1):
                    for m in range(9, 0, -1):
                        for o in range(9, -1, -1):
                            for r in range(9, -1, -1):
                                for y in range(9, -1, -1):
                                    if len(set([s, e, n, d, m, o, r, y])) == 8:
                                        send = 1000 * s + 100 * e + 10 * n + d
                                        more = 1000 * m + 100 * o + 10 * r + e
                                        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y

                                        if send + more == money:
                                            all_solutions.append((send, more, money))
    return all_solutions

print(solutions())



